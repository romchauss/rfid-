
    #include <stdio.h>
    #include <stdlib.h>
    #include <PCSC/winscard.h>

    #define CHECK(f, rv) \
     if (SCARD_S_SUCCESS != rv) \
     { \
      printf(f ": %s\n", pcsc_stringify_error(rv)); \
      return -1; \
     }

    int main()
    {
    int i;
    LONG rv;
    SCARDCONTEXT hContext;
    SCARDHANDLE hCard;
    DWORD dwActiveProtocol,dwRecvLength,dwReaders;
    LPTSTR mszReaders;
    SCARD_IO_REQUEST pioSendPci;
    BYTE pbRecvBuffer[258];
    DWORD dwState, dwProtocol, dwAtrLen, dwReaderLen;
    BYTE *pbAtr = NULL;
    char *pcReader = NULL;
    BYTE cmd1[] = {00,0x84,00,00,0x08};

    rv=SCardEstablishContext(SCARD_SCOPE_SYSTEM, NULL, NULL, &hContext);
    CHECK("SCardEstablishContext", rv)
    rv=SCardListReaders(hContext, NULL, NULL, &dwReaders);
    CHECK("SCardListReaders", rv)
    mszReaders=calloc(dwReaders, sizeof(char));
    rv=SCardListReaders(hContext, NULL, mszReaders, &dwReaders);
    printf("Reader name: %s\n", mszReaders);
    rv = SCardConnect(hContext, mszReaders, SCARD_SHARE_SHARED,SCARD_PROTOCOL_T0, &hCard, &dwActiveProtocol);
    CHECK("SCardConnect", rv)
    dwReaderLen = SCARD_AUTOALLOCATE;
    dwAtrLen = SCARD_AUTOALLOCATE;
    rv = SCardStatus(hCard, (LPSTR)&pcReader, &dwReaderLen, &dwState,    &dwProtocol, (LPBYTE)&pbAtr, &dwAtrLen);
    CHECK("SCardStatus", rv)
    printf("ATR : ");
    for(i=0;i<dwAtrLen;i++) printf("%x ",pbAtr[i]);
    printf("\n");
    pioSendPci = *SCARD_PCI_T0;
    dwRecvLength = sizeof(pbRecvBuffer);
    rv = SCardTransmit(hCard, &pioSendPci, cmd1, sizeof(cmd1), NULL, pbRecvBuffer, &dwRecvLength);
    CHECK("SCardTransmit", rv)
    printf("response: ");
    for(i=0; i<dwRecvLength; i++)
    printf("%02X ", pbRecvBuffer[i]);
    printf("\n");
    }

Et compilez le sous Linux en tapant la commande :
gcc discut.c -o discut -I /usr/include/PCSC -lpcsclite
